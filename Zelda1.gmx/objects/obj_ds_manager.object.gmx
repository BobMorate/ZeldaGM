<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initilize DS Management Shit
ds_managed_init();

/*test_grid=ds_grid_create_managed(1,1,"1.Testing the Grid System",false);
test_list=ds_list_create_managed("1.Testing the List system",false);
test_map=ds_map_create_managed("1.Testing the Map system",false);

test_grid1=ds_grid_create_managed(1,1,"2.Testing the Grid System",false);
test_list1=ds_list_create_managed("2.Testing the List system",false);
test_map1=ds_map_create_managed("2.Testing the Map system",false);

test_grid2=ds_grid_create_managed(1,1,"3.Testing the Grid System",false);
test_list2=ds_list_create_managed("3.Testing the List system",false);
test_map2=ds_map_create_managed("3.Testing the Map system",false);*/

display=0;
start[3]=0;
start[2]=0;
start[1]=0;
start[0]=0;
//1=Grids
//2=Maps
//3=Lists



display_string="Grid";
width=0;
height=0;
ypos=y;

column_padding=5;
column_widths[0]=noone;
row_heights[0]=noone;
font=fnt_small;
ready=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
if(keyboard_check(vk_control))
{
    if(keyboard_check_pressed(vk_return))
    {
        /*ds_list_destroy_managed(test_list);
        ds_map_destroy_managed(test_map);
        ds_grid_destroy_managed(test_grid);
        ds_list_destroy_managed(test_list1);
        ds_map_destroy_managed(test_map1);
        ds_grid_destroy_managed(test_grid1);
        ds_list_destroy_managed(test_list2);
        ds_map_destroy_managed(test_map2);
        ds_grid_destroy_managed(test_grid2);*/
    }
    
    if(keyboard_check_pressed(vk_numpad6))
    {
        display++;
        ready=false;
    }
    if(keyboard_check_pressed(vk_numpad4))
    {
        display--;
        ready=false;
    }
    
    if(display&gt;3)
        display=0;
    if(display&lt;0)
        display=3;
        
    if(keyboard_check(vk_numpad8))
    {
        start[display]-=1;
        if(start[display]&lt;0)
            start[display]=0;
    }
    if(keyboard_check(vk_numpad2))
    {
        start[display]+=1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update
if(!ready &amp;&amp; display&gt;0)
{
    switch(display)
    {
        case 1:display_string="Grids";grid=DS_Grid_Managed;break;
        case 2:display_string="Maps";grid=DS_Map_Managed;break;
        case 3:display_string="Lists";grid=DS_List_Managed;break;
    }
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_black);
    draw_set_font(font);
    //Get column widths
    var i;
    //init column_widths and row_heights array
    i=0;
    repeat(ds_grid_width(grid))
    {
        column_widths[i]=0;
        i+=1;
    }
    i=0;
    repeat(ds_grid_height(grid))
    {
        row_heights[i]=0;
        i+=1;
    }
    
    //Find max column widths and max row heights
    cw=0;
    ch=15;
    cc=0;
    cr=0;
    repeat(ds_grid_width(grid))
    {
        cr=0;
        repeat(ds_grid_height(grid))
        {
            cw=string_width("| "+string(ds_grid_get(grid,cc,cr)));
            ch=string_height(string(ds_grid_get(grid,cc,cr)));
            if(cw&gt;column_widths[cc])
                column_widths[cc]=cw;
            if(ch&gt;row_heights[cr])
            {
                row_heights[cr]=ch;
            }
            cr+=1;
        }
        cc+=1;
    }
    ready=true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Management Grids
if(display&gt;0 &amp;&amp; ready)
{
    ///Debug - Draw Palette Info
    draw_set_text_alignment(7);
    draw_set_color(c_white);
    draw_set_font(font);
    var cr,cc,cx,cy;
    cr=0;
    cc=0;
    cx=x;
    cy=ypos+y;
    
    switch(display)
    {
        case 1:display_string="Grids";grid=DS_Grid_Managed;break;
        case 2:display_string="Maps";grid=DS_Map_Managed;break;
        case 3:display_string="Lists";grid=DS_List_Managed;break;
    }
    draw_text(x,cy,display_string+"  Total: "+string(ds_grid_height(grid)))
    
    repeat(ds_grid_width(grid))
    {
        cr=start[display];
        cy=ypos+string_height(display_string)+y;
        repeat(ds_grid_height(grid))
        {
            draw_text(cx,cy,"| "+string(ds_grid_get(grid,cc,cr)));
            cy+=row_heights[0];
            cr+=1;
        }
        
        cx+=column_widths[cc]+column_padding;
        cc+=1;
        
    }
    height=cy-ypos;
    width = cx-x;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
