<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Properties
font=fnt_text;
text_list=string_parse("Test String/Test","/",true);
draw_set_font(font);
line_height=string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890';:,.?");
line_spacing=-1;

line_speed=.1; //lines per step
scroll_speed=2;
max_line=3;
current_line=0;

scroll_to=3;
can_write=3;

text_color=c_white;
text_stroke_color=c_navy;

proceed=false;

text_y=0;

margin=2;
surface_width=240;
surface_height=52;
surface=surface_create(surface_width,surface_height);
surface_set_target(surface);
    draw_clear_alpha(c_black,0);
surface_reset_target();





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States
var _i=0;
state_write=_i++;
state_wait=_i++;
state_scroll=_i++;


state=state_write;
state_next=state;
state_timer=0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Position Correctly
//Center X
x=view_xview+screen_width/2-surface_width/2;

//Where is link?
//show_debug_message("Link Y: "+string(obj_link.y)+" view_yview: "+string(view_yview)+" Screen Height/2: "+string(screen_height/2))
if(obj_link.y-view_yview &lt; screen_height/2)
{   //Top half of the screen. Show in the bottom
    y=view_yview+screen_height - surface_height- 50;
}
else
{   //Bottom Half of screen, show in top.
    y=view_yview+30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Surface
surface_free(surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Write Dialog
if(state == state_write)
{
    if(current_line&lt;can_write)
    {
        current_line+=line_speed;
        if(current_line mod 1 == 0 || current_line mod 1 == 1)
        {   
            sfx_play("Text Line");
        }
    }
    else
    {
        if(current_line==scroll_to)
        {
            state_next=state_wait;
            sfx_play("Text Done");
            proceed=false;
        }
        else if(current_line==can_write)
        {
            state_next=state_scroll;
        }
        
        

    }
}
else if(state == state_wait)
{   //Wait for flag to continue, check to make sure it's not the end of the dialog.
    if(proceed)
    {
        
        if (ds_list_size(text_list) &lt;= current_line)
        {   //We are done
            instance_destroy();
        }
        else    //Scroll
        {
            scroll_to=min(scroll_to+3,ds_list_size(text_list));
            state_next=state_scroll;
        }
    }
}
else if(state == state_scroll)
{
    if(state_timer==16/scroll_speed)
    {
        can_write=min(can_write+1,scroll_to);
        state_next=state_write;
    }
    else
    {
        text_y-=scroll_speed;
    }
}



//Draw Text regardless of state.
if(surface_exists(surface))
{
    surface_set_target(surface);
    {
        draw_clear_alpha(c_black,0);
        draw_set_text_alignment(7);
        draw_set_font(font);
        for(var i=0; i&lt;current_line &amp;&amp; i&lt;ds_list_size(text_list);i++)
            draw_text_stroked(1+margin,
                              text_y+(line_spacing*i)+(line_height*i),
                              ds_list_find_value(text_list,i),
                              text_color,
                              text_stroke_color,
                              1,
                              1);
                          
    }
    surface_reset_target();
    
}
else
    surface=surface_create(surface_width,surface_height);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adjust state
if(state_next!=state)
{
    state=state_next;
    state_timer=0;
}
else
    state_timer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Text
if(surface_exists(surface))
{
    var _marg=4;
    draw_surface(surface,x,y);
    draw_frame(x-_marg,y-_marg,x+surface_width+_marg,y+surface_height+_marg,spr_text_frame);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
