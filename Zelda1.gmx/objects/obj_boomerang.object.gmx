<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boomerang_normal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile</parentName>
  <maskName>spr_collision_bot_origin</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boomerang specifc properties
event_inherited();
image_speed=0;
start_x=x;
start_y=y;
my_speed=3;
hit_list=ds_list_create()
ignore_collision=false;
rotate_speed=20;
rotate_angle=0;
max_range=5*tile_size;
is_returning=false;

kill_list=ds_list_create();
ds_list_add(kill_list,obj_keese_black,obj_gel);
sfx=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Hit List
ds_list_destroy(hit_list);
ds_list_destroy(kill_list);

if(sfx != noone)
    FMODInstanceStop(sfx);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spin
event_inherited();
if(speed&gt;0)
{
    if(sfx==noone)
    {
        sfx=sfx_play("Boomerang",true);
    }
    rotate_angle-=rotate_speed;
    sprite_angle=round_n(rotate_angle,45);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for walls and out of sector
if(!is_returning &amp;&amp; place_meeting(x,y,obj_wall) &amp;&amp; is_solid)
{   //Hit a wall
    if(instance_place(x,y,obj_wall).blocks_rang &amp;&amp; instance_place(x,y,obj_wall).enabled)
    {
        /*var i=instance_place(x,y,obj_wall);
        if(i.image_blend==c_black)
            i.image_blend=c_white;
        else
            i.image_blend=c_black;*/
        is_returning=true;
        sfx_play("Chink");
        instance_create(x,y,obj_fx_boom_hit_spark);
    }
}
var _margin=tile_size;
if(x&lt;obj_world_manager.bound_left-_margin || x&gt;obj_world_manager.bound_right+screen_width+_margin ||
   y&lt;obj_world_manager.bound_top-_margin || y&gt;obj_world_manager.bound_bot+screen_height+_margin)
{
    is_returning=true;
    //sfx_play("Chink");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return
if(point_distance(x,y,start_x,start_y)&gt;max_range &amp;&amp; !is_returning)
    is_returning=true;

if(is_returning)
{
    if(instance_exists(owner))
    {
        direction=point_direction(x,y,owner.x,owner.y-owner.boomerang_yoff);
        if(point_distance(x,y,owner.x,owner.y-owner.boomerang_yoff)&lt;=speed)
        {
            owner.my_boomerang=instance_kill(id);
        }
    }
    else
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_actor_master">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit enemies
if(is_solid &amp;&amp;
   other.team != team &amp;&amp;
   ds_list_find_index(hit_list,other.id) == -1 &amp;&amp;
   !actor_is_invincible(other))
{
    is_returning=true;
    ds_list_add(hit_list,other.id);
    instance_create(x,y,obj_fx_boom_hit_spark);
    sfx_play("Enemy Hit");
    
    if(ds_list_find_index(kill_list,other.object_index) != -1)
    {   //Kill
        with(other)
        {
            attacker=other.id;
            state_switch("Knock Back");
        }
    }
    else
    {   //Stun or ignore
        other.dizzy_timer=room_speed*3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,5</point>
    <point>5,5</point>
  </PhysicsShapePoints>
</object>
