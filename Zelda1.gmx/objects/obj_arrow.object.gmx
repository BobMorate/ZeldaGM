<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow_normal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arrow specifc properties
event_inherited();
image_speed=0;
sprite=noone;
sfx_play("Bow Shoot");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Sprite
if(sprite != noone)
    sprite_delete(sprite);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stick to owner.
if(is_sticky &amp;&amp; owner != noone &amp;&amp; instance_exists(owner))
{
    switch(image_angle)
    {
        case north:
            x=owner.x;
            y=owner.y;
            break;
        case south:
            x=owner.x;
            y=owner.y;
            break;
        case east:
            x=owner.x;
            y=owner.y;
            break;
        case west:
            x=owner.x;
            y=owner.y;
            break;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate
if(speed&gt;0 &amp;&amp; point_distance(x,y,obj_link.x,obj_link.y)&gt;8)
{
    image_index=1;
}
else if(speed==0)
{
    if(expire_timer&gt;room_speed*2)
        image_index=clamp(image_index+.5,2,5);
    else
        image_index=3;
}

if(is_sticky &amp;&amp; instance_exists(owner))
{
    if(owner.facing_direction==north)
        depth=owner.depth+1;
    else
        depth=owner.depth-1;
}
else if (is_sticky)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for walls.
if(place_meeting(x,y,obj_wall) &amp;&amp; is_solid &amp;&amp; instance_place(x,y,obj_wall).enabled)
{
    if(image_angle==south)
        y+=z+speed;
    expire_timer=room_speed*3;
    speed=0;
    is_solid=false;
    sfx_play("Arrow Hit");
    draw_shadow=false;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for out of view.
var _view_margin=10;
if(x &lt; view_xview-_view_margin ||
   x &gt; view_xview+screen_width+_view_margin ||
   y &lt; view_yview-_view_margin ||
   y &gt; view_yview+screen_height+_view_margin)
{   //Out of view.  destroy.
    instance_destroy();
}

if(x &lt; bound_left||
   x &gt; bound_right + screen_width ||
   y &lt; bound_top ||
   y &gt; bound_bot + screen_height)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Expire
if(expire_timer==0)
{
    instance_destroy();
}
else if (expire_timer&gt;0)
    expire_timer--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_actor_master">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit enemies
if(is_solid &amp;&amp;
   other.team != team &amp;&amp;
   !actor_is_invincible(other))
{
    //instance_create(x,y,obj_fx_boom_hit_spark);
    other.hit_points-=damage;
    if(other.state_interruptable)
    {
        with(other)
            state_switch("Knock Back");
        var _dif=abs(angle_difference(other.facing_direction,image_angle));
        if( _dif == 0)
            other.state_direction=other.facing_direction;
        else if(_dif == 180)
            other.state_direction=other.facing_direction-180;
        else
            other.state_direction=-1;
            
        
    }
    image_index=5;
    sprite=sprite_duplicate(sprite_index);
    sprite_index=sprite;
    sprite_set_offset(sprite,18,4);
    owner=other.id;
    is_sticky=true;
    sfx_play("Arrow Hit");
    
    expire_timer=room_speed*3;
    is_solid=false;
    draw_shadow=false;
    speed=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>7,2</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
