<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spawner</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-40000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lists
monster_list_grid=ds_list_create();
monster_list_free=ds_list_create();
active=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup DS
ds_list_destroy(monster_list_grid);
ds_list_destroy(monster_list_free);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn grid restricted monsters.
if(active)
{
    //show_debug_message("Spawner reporting! Attempting to spawn monsters!");
    var _edge_buffer=2;
    
    if(ds_list_size(monster_list_grid)&gt;0)
    {   //We have grid based monsters.
        
        var _safe_places = ds_list_create()
        var _grid = obj_world_manager.collision_grid;
        for(var _x=_edge_buffer; _x&lt;ds_grid_width(_grid)-1-_edge_buffer;_x++)
        {
            for(var _y=_edge_buffer; _y&lt;ds_grid_height(_grid)-1-_edge_buffer;_y++)
            {
                if(_grid[# _x,_y])
                    ds_list_add(_safe_places,write_coordinates(_x,_y));
            }
        }
        ds_list_shuffle(_safe_places);
        if(ds_list_size(_safe_places)&gt;=ds_list_size(monster_list_grid))
        {
            for(var i=0; i&lt;ds_list_size(monster_list_grid);i++)
            {   //Spawn all my enemies.
                var _top, _left;
                var _x,_y;
                do
                {
                    var _coord = ds_list_find_value(_safe_places,0);
                    ds_list_delete(_safe_places,0);
                    _x=coordinate_pair_get_x(_coord);
                    _y=coordinate_pair_get_y(_coord);
                }
                until(ai_can_move(_x,_y))
                
                with(obj_world_manager)
                {
                    _top = bound_top;
                    _left = bound_left;
                }
                var _monster=instance_create(_left+_x*tile_size,_top+_y*tile_size,ds_list_find_value(monster_list_grid,i));
                _monster.is_frozen=true;
                _monster.facing_direction=choose(north,south,east,west);
                actor_snap_to_grid(_monster);
            }
        }
        else
           show_debug_message("Not enough safe spaces to spawn the requested number of monters.  Check safe path grid in area.");
        ds_list_destroy(_safe_places);
    }
    
    //Spawn free monsters.
    for(var i=0; i&lt;ds_list_size(monster_list_free);i++)
    {   //Spawn all my enemies.
        var _top, _left, _right, _bot, _margin;
        _margin = tile_size*2;
        with(obj_world_manager)
        {
            _top = bound_top + _margin;
            _left = bound_left + _margin;
            _right = bound_right+screen_width - _margin;
            _bot = bound_bot+screen_height - _margin;
        }
        var _x=irandom_range(_left,_right);
        var _y=irandom_range(_top,_bot);
        while(point_distance(obj_link.x,obj_link.y,_x,_y)&lt;64 &amp;&amp; !place_meeting(_x,_y,obj_enemy_master))
        {   //Prevent enemies from being spawned right on top of link.
            var _x=irandom_range(_left,_right);
            var _y=irandom_range(_top,_bot);
        }
        var _monster=instance_create(_x,_y,ds_list_find_value(monster_list_free,i));
        //show_debug_message("Spawned Monster at "+write_coordinates(_x,_y));
        _monster.is_frozen=true;
    }   
    
    //Done spawning, deactivate.
    active=false;
    //instance_deactivate_object(id);
    with(obj_enemy_master)
        depth=-y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var _safe_places = ds_list_create()
/*for(i=0;i&lt;ds_list_size(_safe_places);i++)
{
    var _cord=ds_list_find_value(_safe_places,i);
    var _x=coordinate_pair_get_x(_cord);
    var _y=coordinate_pair_get_y(_cord);
    draw_set_color(c_aqua)
    draw_circle(obj_world_manager.bound_left+_x*tile_size,
                obj_world_manager.bound_top+_y*tile_size,
                3,false);
}


/*var _grid = obj_world_manager.collision_grid;
for(var _x=2; _x&lt;ds_grid_width(_grid)-1-2;_x++)
{
    for(var _y=2; _y&lt;ds_grid_height(_grid)-1-2;_y++)
    {
        if(_grid[# _x,_y])
        {
            draw_set_color(c_aqua)
            draw_circle(obj_world_manager.bound_left+_x*tile_size,
                        obj_world_manager.bound_top+_y*tile_size,
                        3,false);
            //ds_list_add(_safe_places,write_coordinates(_x,_y));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
