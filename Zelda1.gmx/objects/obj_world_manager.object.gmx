<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
show_debug_message("Creating World Manager");
bound_left=0;
bound_right=0;
bound_top=0;
bound_bot=0;

collision_grid=noone;
camera_grid=noone;
room_map=ds_map_create();
room_music_map=ds_map_create();

is_panning=false;
pan_start_x=-1000;
pan_start_y=-1000;
pan_target_x=-1000;
pan_target_y=-1000;

pan_tween_x=noone;
pan_tween_y=noone;

initilized=false;

pan_length=1;

//Tween Stuff
current_tween=0//14;
tween_list=ds_list_create();
ds_list_add(tween_list,EaseLinear,EaseInQuad,EaseOutQuad,EaseInCubic,EaseOutCubic,EaseInOutCubic,
                       EaseInQuart,EaseOutQuart,EaseInOutQuart,EaseInQuint,EaseOutQuint,EaseInOutQuint);
ds_list_add(tween_list,EaseInSine,EaseOutSine,EaseInOutSine,EaseInCirc,EaseOutCirc,EaseInOutCirc,
                       EaseInExpo,EaseOutExpo,EaseInOutExpo,EaseInBack,EaseOutBack,EaseInOutBack);
ds_list_add(tween_list,EaseInBounce,EaseOutBounce,EaseInOutBounce,EaseInElastic,EaseOutElastic,EaseInOutElastic);

tween_names=ds_list_create();
ds_list_add(tween_names,"EaseLinear","EaseInQuad","EaseOutQuad","EaseInCubic","EaseOutCubic","EaseInOutCubic",
                        "EaseInQuart","EaseOutQuart","EaseInOutQuart","EaseInQuint","EaseOutQuint","EaseInOutQuint");
ds_list_add(tween_names,"EaseInSine","EaseOutSine","EaseInOutSine","EaseInCirc","EaseOutCirc","EaseInOutCirc",
                        "EaseInExpo","EaseOutExpo","EaseInOutExpo","EaseInBack","EaseOutBack","EaseInOutBack");
ds_list_add(tween_names,"EaseInBounce","EaseOutBounce","EaseInOutBounce","EaseInElastic","EaseOutElastic","EaseInOutElastic");
ease_type=ds_list_find_value(tween_list,current_tween);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Camera Boundries Index for All Maps

//Load the overworld map grid and create the camera map grid.
//map_add_dungeon(rm_overworld_2x3,"overworld_2x3.csv","Overworld");
//map_add_dungeon(rm_oldmancave,"","Dungeon");
map_add_dungeon(rm_dungeon_1,"dungeon1.csv","Dungeon");
map_add_dungeon(rm_overworld,"overworld.csv","Overworld");
map_add_dungeon(rm_oldmancave,"","Dungeon");
map_add_dungeon(rm_bow_room,"connected_1x2.csv","Dungeon");
//map_add_dungeon(LoZ_Overworld,"overworld.csv","Overworld");



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recent Sector list
recent_sector_grid=ds_grid_create(2,0);
sector_limit=4;
current_sector="";
previous_sector="";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Animated Tile System
animated_tile_init();
    
//Add tilesets
animated_tile_add(bkg_animtile_water,.13,2,spr_animtile_water);
animated_tile_add(bkg_animtile_dungeon_blue,.13,2,spr_animtile_dungeon_blue);

/*
animated_tile_add(bkg_animtiles_waterfall,.25,spr_animtile_waterfall,1);*/


//Add Layers
animated_tile_add_layer(-2);
animated_tile_add_layer(-10);
animated_tile_add_layer(-5002);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle System
globalvar FX_System;
FX_System = part_system_create();
part_system_depth(FX_System,-5000);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create shadow system
globalvar Shadow_System;
Shadow_System=part_system_create();
part_system_depth(Shadow_System,-11);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create environment manager
if(!instance_exists(obj_outside_environment_manager))
    instance_create(0,0,obj_outside_environment_manager);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup all the data structures.
show_debug_message("Cleaning Up World Manager");
ds_grid_destroy(collision_grid);
ds_map_destroy(room_map);
ds_list_destroy(room_music_map);
ds_list_destroy(tween_list);
ds_list_destroy(tween_names);


//Clean up recent_sector_grid
recent_sector_clear(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Animated Tile System
animated_tile_cleanup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update camera position based on Link.
if(instance_exists(obj_link) &amp;&amp; initilized)
{
    //Check if link has collided with the camera edge.
    var _link_outside = !point_in_rectangle(obj_link.x,obj_link.y,bound_left,bound_top,bound_right+screen_width,bound_bot+screen_height);
    if(_link_outside &amp;&amp; obj_link.ignore_view_transitions)
        _link_outside=false;    //Ignore if link is transitioning.
    
    if(!is_panning &amp;&amp; instance_exists(obj_link) &amp;&amp; _link_outside)
    {   //BEGIN PAN
        camera_pan_begin();
        //Set Link's State
        with(obj_link)
        {
            if(!obj_link.is_swimming)
            {
                state_switch("Walk");
                image_speed=.3;
                facing_direction=movement_direction;
            }
            else
            {
                state_switch("Swim");
                image_speed=.1;
            }
            
        }
        
    }
    else if(!is_panning)
        camera_position();  //Center camera on link if not panning.
    else if(pan_tween_x != noone &amp;&amp; pan_tween_y != noone)
    {   //Currently Panning
        //show_debug_message("panning");
        if(TweenIsStopped(pan_tween_x) &amp;&amp; TweenIsStopped(pan_tween_y))
        {
            camera_pan_end();
        }
        view_xview=x;
        view_yview=y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate Tiles
animated_tile_update();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Tween
/*
if(keyboard_check_pressed(vk_numpad6))
{
    current_tween++;
    if(current_tween&gt;=ds_list_size(tween_list))
        current_tween=0;

}
else if(keyboard_check_pressed(vk_numpad4))
{
    current_tween--;
    if(current_tween&lt;0)
        current_tween=ds_list_size(tween_list)-1;
}
ease_type=ds_list_find_value(tween_list,current_tween);

if(keyboard_check_pressed(vk_numpad8))
    pan_length+=.1;
else if(keyboard_check_pressed(vk_numpad2))
    pan_length-=.1;
    
pan_length=clamp(pan_length,0,5);
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_color(c_black);
draw_text(3,3,"Tween Type: "+ds_list_find_value(tween_names,current_tween)+
             "#Tween Length: "+string(pan_length));
draw_set_color(c_white);
draw_text(2,2,"Tween Type: "+ds_list_find_value(tween_names,current_tween)+
             "#Tween Length: "+string(pan_length));

/*draw_set_color(c_black);
draw_text(3,3,"Left Bound: "+string(bound_left)+
             "#Top Bound: "+string(bound_top)+
             "#Right Bound: "+string(bound_right)+
             "#Bot Bound: "+string(bound_bot)+
             "#Link: "+string(obj_link.x)+","+string(obj_link.y)
             )
draw_set_color(c_white);
draw_text(2,2,"Left Bound: "+string(bound_left)+
             "#Top Bound: "+string(bound_top)+
             "#Right Bound: "+string(bound_right)+
             "#Bot Bound: "+string(bound_bot)+
             "#Link: "+string(obj_link.x)+","+string(obj_link.y)
             )
*/
/*draw_set_text_alignment(9);
draw_text(screen_width,0,"Mouse Coordinates: "+write_coordinates(mouse_x,mouse_y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG: Draw collision grid.
/*if(collision_grid != noone)
{
    for(var _x=0;_x&lt;ds_grid_width(collision_grid);_x++)
    {
        for(var _y=0;_y&lt;ds_grid_height(collision_grid);_y++)
        {
            if(collision_grid[# _x,_y] == true)
                draw_circle_colour(bound_left+(_x*16)+8,bound_top+(_y*16)+8,1,c_white,c_white,false);
            else
               draw_circle_colour(bound_left+(_x*16)+8,bound_top+(_y*16)+8,1,c_red,c_red,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
