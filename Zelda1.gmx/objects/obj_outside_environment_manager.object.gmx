<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-25000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Properties
time=0;

//States
enum States{Day,Evening,Night,Morning,Previous};
state=States.Day//choose(States.Day,States.Evening,States.Night,States.Morning,States.Rain);

state_stuff=ds_grid_create(10,0);
environment_add_state(States.Day,c_white,seconds(10),States.Evening,false,$b19d8b,true,false);
environment_add_state(States.Evening,$59b6ff,seconds(10),States.Night,false,$588ab2,true,false);
environment_add_state(States.Night,$c66031,seconds(10),States.Morning,true,$594238,false,true);
environment_add_state(States.Morning,$8cffe6,seconds(10),States.Day,false,$91ccbf,true,true);

state_next=state;
state_new=true;
state_timer=0;
state_length=0;
target_state=state_next;
transition_length=seconds(5);
transition_timer=0;

//Weather
enum Weather{Clear,Rainy,Cloudy,Foggy};
current_weather=Weather.Clear;
weather_timer=0;
weather_length=0;
weather_min_length=seconds(5);
weather_max_length=seconds(15);
weather_x=0;
weather_y=0;
weather_speed=.25;
weather_direction=irandom(359);

overlay_color=environment_state_get_color(state);
current_color=overlay_color;
next_color=current_color;

allow_fog=true;
fog_alpha=0;

allow_clouds=true;
clouds_alpha=0;
cloud_surface=surface_create(screen_width,screen_height);
clear_surface(cloud_surface);

allow_lights=true;
light_alpha=0;

allow_rain=true;
rain_amount=0;
rain_grid=ds_grid_create(3,0);
rain_speed=1;
rain_alpha=.75;
rain_number=sprite_get_number(spr_fx_rain);
rain_max=5;//new drops per frame
rain_sfx=sfx_play("Rain Out",true);
FMODInstanceSetVolume(rain_sfx,0);
lightning=0;
lightning_length=20;
lightning_chance_max=seconds(7);
lightning_chance=lightning_chance_max;
//Lights
lantern_scale=0;
lantern_base=.5*save_data_get("Lantern");
lantern_amp=.025;
lantern_speed=.4;

//Surface
surface=surface_create(screen_width,screen_height);
clear_surface(surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup
surface_free(surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for upgraded lantern periodically
if(room == rm_overworld &amp;&amp; allow_lights &amp;&amp; state_timer mod 20 == 0)
    lantern_base=.5*save_data_get("Lantern");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create surface if it doesn't exist
if(!surface_exists(surface))
{
    surface=surface_create(screen_width,screen_height);
    clear_surface(surface);   
}

if(!surface_exists(cloud_surface))
{
    cloud_surface=surface_create(screen_width,screen_height);
    clear_surface(surface);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Current Weather
if(transition_timer==0)
{
    if(weather_timer&gt;weather_length)
    {   //Change the weather
        var _prev_weather=current_weather;
        if(current_weather==Weather.Rainy)
        {
            if(state == States.Night || state == States.Morning)
            {
                current_weather=choose(Weather.Rainy,
                                       Weather.Foggy,Weather.Foggy,
                                       Weather.Clear);
            }
            else
            {
                current_weather=choose(Weather.Rainy,
                                       Weather.Cloudy,Weather.Cloudy,
                                       Weather.Clear);
            }
        }
        else
        {
            current_weather=choose(Weather.Rainy,
                                   Weather.Cloudy,Weather.Cloudy,Weather.Cloudy,Weather.Cloudy,
                                   Weather.Clear,Weather.Clear,Weather.Clear);
        }
        weather_length=irandom_range(weather_min_length,weather_max_length);
        weather_timer=0;
    }
    else
        weather_timer++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Times of Day
if(transition_timer==0)
{
    if(state_new)
    {
        state_length=environment_state_get_length(state);
        allow_lights=environment_state_get_lights(state);
        allow_fog=enviornment_state_get_fog(state);
        allow_clouds=environment_state_get_clouds(state);
    }
    if(room=rm_overworld)
    {
        if(current_weather == Weather.Rainy)
        {
            current_color=environment_state_get_rain(state);
            if(lightning==0 &amp;&amp; irandom(lightning_chance)==1)
            {
                lightning=lightning_length;
                lightning_chance=lightning_chance_max;
                var _thunder=sfx_play("Bomb Blow",false)
                FMODInstanceSetFrequency(_thunder,FMODInstanceGetFrequency(_thunder)/3);
            }
            else
                lightning_chance--;   
                
        }
        else
            current_color=environment_state_get_color(state);
    }
    //End State, Move to next
    if(state_timer&gt;state_length)
    {
        //show_debug_message("End of time: "+string(state));
        state_next=environment_state_get_next_state(state);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transition
if(room=rm_overworld)
{
    if(current_color != overlay_color)
    {
        if(transition_timer==0)
            prev_color=overlay_color;
    
        overlay_color=merge_color(prev_color,current_color,transition_timer/transition_length);
            
        if(transition_timer&gt;=transition_length)
        {
            overlay_color=overlay_color;
            transition_timer=0;
            //show_debug_message("Done Transitioning");
        }
        else
            transition_timer++;
    }
    else
        transition_timer=0;
    
    //Effect transitions
    //Fade Lights
    if(allow_lights &amp;&amp; light_alpha&lt;1)
        light_alpha+=.005;
    else if(!allow_lights &amp;&amp; light_alpha&gt;0)
        light_alpha-=.005;    
    
    //Fade Clouds
    if(allow_clouds &amp;&amp; current_weather=Weather.Cloudy &amp;&amp; clouds_alpha&lt;.3)
        clouds_alpha+=.001;
    else if((!allow_clouds || current_weather!=Weather.Cloudy) &amp;&amp; clouds_alpha&gt;0)
        clouds_alpha-=.001;
        
    //Fade Fog
    if(allow_fog &amp;&amp; current_weather=Weather.Foggy &amp;&amp; fog_alpha&lt;.2)
        fog_alpha+=.001;
    else if((!allow_fog || current_weather!=Weather.Foggy) &amp;&amp; fog_alpha&gt;0)
        fog_alpha-=.001;
        
    //Change rain
    if(current_weather == Weather.Rainy &amp;&amp; rain_amount &lt;1)
    {
        rain_amount+=.001;
        
    }
    else if(current_weather != Weather.Rainy &amp;&amp; rain_amount &gt; 0)
    {
        rain_amount-=.005;
        //FMODInstanceSetVolume(rain_sfx,rain_amount*SFX_Volume);
    }
    
    //Rain SFX
    if(current_weather == Weather.Rainy &amp;&amp; FMODInstanceGetVolume(rain_sfx)&lt;rain_amount*SFX_Volume*.75)
    {   //Increase rain sfx volume
        if(!instance_exists(obj_transfx_spotlight_out))
            FMODInstanceSetVolume(rain_sfx,rain_amount*SFX_Volume*.75);
    }
    else if(current_weather != Weather.Rainy &amp;&amp; FMODInstanceGetVolume(rain_sfx)&gt;0)
    {
        FMODInstanceSetVolume(rain_sfx,rain_amount*SFX_Volume);
    }
}
else
    FMODInstanceSetVolume(rain_sfx,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>-------------------------------</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw to Surface
if(room=rm_overworld &amp;&amp; surface_exists(surface))
{
    surface_set_target(surface);
    {
        draw_clear_alpha(overlay_color,1);
        if(lightning&gt;0)
        {
            draw_set_alpha(lerp(0,1,lightning/lightning_length));
            //draw_clear_alpha(c_white,lerp(0,1,lightning/lightning_length))
            draw_set_color(c_white);
            draw_rectangle(0,0,screen_width,screen_height,false);
            draw_set_alpha(1);
            lightning--;
        }
    }
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Lights
if(room == rm_overworld &amp;&amp; light_alpha&gt;0)
{
    surface_set_target(surface)
    {
        ///Link's lantern
        environment_draw_lights();
    }
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Advance state
if(state_next!=state)
{
    state=state_next;
    state_new=true;
    state_timer=0;
}
else
{
    state_new=false;
    if(transition_timer == 0)
        state_timer++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_text);
draw_set_text_alignment(1);
var _time="";
var _weather="";

switch(state)
{
    case States.Day: _time="Day"; break;
    case States.Evening: _time="Evening"; break;
    case States.Night: _time="Night"; break;
    case States.Morning: _time="Morning"; break;
}
    
switch(current_weather)
{
    case Weather.Clear: _weather="Clear"; break;
    case Weather.Rainy: _weather="Rainy"; break;
    case Weather.Cloudy: _weather="Cloudy"; break;
    case Weather.Foggy: _weather="Foggy";break;
}

draw_text(5,display_get_gui_height()-5,"Current Time: "+_time+
             "#Current Weather: "+_weather);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Surface
if(room == rm_overworld)
{
    draw_set_blend_mode_ext(bm_dest_color, bm_zero)
        draw_surface(surface,view_xview,view_yview);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Weather
//Add new drops
if(room==rm_overworld)
{
    repeat(round(rain_max*rain_amount))//for(var i=0;i&lt;round(rain_max*rain_amount);i++)
    {   
        var _row=ds_grid_add_row(rain_grid);
        var _x=irandom_range(view_xview-60,view_xview+screen_width+60);
        var _y=irandom_range(view_yview-60,view_yview+screen_height+60);
        ds_grid_set(rain_grid,0,_row,_x);
        ds_grid_set(rain_grid,1,_row,_y);
        ds_grid_set(rain_grid,2,_row,0);
    }
    
    draw_set_blend_mode(bm_add);
    for(var i=0; i&lt;ds_grid_height(rain_grid);i++)
    {
        var _frame=ds_grid_get(rain_grid,2,i);
        draw_sprite_ext(spr_fx_rain,_frame,ds_grid_get(rain_grid,0,i),ds_grid_get(rain_grid,1,i),1,1,0,c_white,rain_alpha)
        //Update
        _frame+=rain_speed;
        if(_frame&lt;=rain_number)       
            ds_grid_set(rain_grid,2,i,_frame);
    }
    draw_set_blend_mode(bm_normal);
    //Cleanup finished raindrops
    while(ds_grid_value_exists(rain_grid,2,0,2,ds_grid_height(rain_grid)-1,rain_number))
    {
        var _row=ds_grid_value_y(rain_grid,2,0,2,ds_grid_height(rain_grid)-1,rain_number);
        rain_grid=ds_grid_delete_row(rain_grid,_row);
    }
    
    if(clouds_alpha&gt;0 &amp;&amp; surface_exists(cloud_surface))
    {
        clear_surface(cloud_surface);
        surface_set_target(cloud_surface)
            draw_background_tiled(bkg_cloud_shadows,weather_x,weather_y)//,2,2,c_white,1);
            draw_background_tiled(bkg_cloud_shadows_small,weather_x*2,weather_y*2)//,1,1,c_white,1);
        surface_reset_target();
        
        draw_surface_ext(cloud_surface,view_xview,view_yview,1,1,0,c_white,clouds_alpha);
    }
    if(fog_alpha&gt;0)
            draw_background_tiled_ext(bkg_fog,weather_x,weather_y,1,1,c_white,fog_alpha);
    weather_x+=weather_speed;
    weather_y-=weather_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
