<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game States
var _i=0;
game_state_wait=_i++;
game_state_start=_i++;
game_state_intro=_i++;
game_state_press_start=_i++;
game_state_slot_select=_i++;
game_state_in_game=_i++;
game_state_paused=_i++;
state=game_state_intro;

state_new=true;
state_timer=0;
state_next=game_state_wait;

game_started=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Sound System
LoadFMOD();
FMODinit(100,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound Libraries
music_library_init();
sound_library_init();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System Controls (Non Changeable)

globalvar system_button_start_pressed,system_button_select_pressed,system_button_okay_pressed,system_button_cancel_pressed;
globalvar system_button_up_pressed,system_button_down_pressed,system_button_left_pressed,system_button_right_pressed;

system_button_zero();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init save data
save_data_init();
save_files_init();

globalvar Active_Save_Slot;
Active_Save_Slot=0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options and settings
screen_scale=1;
is_full_screen=false;
screen_sized=false;

globalvar BGM_Volume,SFX_Volume;
BGM_Volume=.2;//system_data_load("BGM Volume");
SFX_Volume=system_data_load("SFX Volume");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup palette swap system.
pal_swap_init_system(19);
pal_swap_add_palette(spr_link_palette);

//Enemies
pal_swap_add_palette(spr_octorock_palette);
pal_swap_add_palette(spr_keese_palette);
pal_swap_add_palette(spr_stalfos_palette);
pal_swap_add_palette(spr_goriya_palette);
pal_swap_add_palette(spr_gel_palette);
pal_swap_add_palette(spr_wall_master_palette);

//Environment
pal_swap_add_palette(spr_door_palette);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add Sprite fonts
globalvar fnt_mini_numbers;
globalvar fnt_micro_numbers;
fnt_mini_numbers=font_add_sprite(spr_font_mini_numbers,ord("0"),true,1);
fnt_micro_numbers=font_add_sprite(spr_font_micro_numbers,ord("0"),true,0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Begin the game</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Randomize
randomize();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goto start screen.
//room_goto(rm_triforce_spin)//rm_start_screen);
//state_next=game_state_intro;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup DS
ds_grid_destroy(Music_Grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update sound system
FMODUpdate();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read System Controls
system_button_start_pressed  = keyboard_check_pressed(vk_space);
system_button_select_pressed = keyboard_check_pressed(vk_enter);
system_button_okay_pressed   = keyboard_check_pressed(ord("X"));
system_button_cancel_pressed = keyboard_check_pressed(ord("Z"));

system_button_up_pressed     = keyboard_check_pressed(vk_up);
system_button_down_pressed   = keyboard_check_pressed(vk_down);
system_button_left_pressed   = keyboard_check_pressed(vk_left);
system_button_right_pressed  = keyboard_check_pressed(vk_right);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--Begin States</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wait for keyboard
if(state==game_state_wait &amp;&amp; keyboard_check_pressed(vk_space))
{
    room_goto(rm_triforce_spin)//rm_start_screen);
    state_next=game_state_start;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Triangle Screen
if(state==game_state_intro)
{
    if(keyboard_check_pressed(vk_space))
    {
        instance_kill(obj_3dCamera);
        instance_kill(obj_triangle);
        room_goto(rm_start_screen);
        state_next=game_state_press_start;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Start Screen.
if(state=game_state_press_start)
{
    if(state_new)
    {
        //audio_play_music(bgm_title_theme,true);
        bgm_play("Opening Theme");
    }
    if(keyboard_check_pressed(vk_space))
    {   //Go to save game select
        var _trans=transition_create(.5*room_speed,.5*room_speed,.5*room_speed);
        transition_add_room_change(_trans,rm_slot_select);
        transition_add_fade_out(_trans);
        transition_add_fade_in(_trans,"");
        transition_add_music_change(_trans,false,"Fairy",music_get_loop("Fairy"));
        state_next=game_state_slot_select;
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: In_Game
if(state==game_state_in_game)
{
    item_grid_cooldown_tic();
    //Listen for pause
    /*if(system_button_start_pressed)
    {
        state_next=game_state_paused;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Game Paused
if(state==game_state_paused)
{
    if(state_new)
        instance_create(0,0,obj_pause);
    
    else if(system_button_start_pressed)
    {
        instance_kill(obj_pause);
        
        state_next=game_state_in_game;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>--End States</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///React to full screen.
/*if(window_get_fullscreen() &amp;&amp; !is_full_screen)
{   //fullscreen enabled
    is_full_screen=true;
    display_reset(0,0);
}
else if(!window_get_fullscreen() &amp;&amp; is_full_screen)
{   //back to windowed
    is_full_screen=false;
    display_reset(0,0);
    window_set_size(screen_width*screen_scale,screen_height*screen_scale);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch State
if(state == state_next)
{   
    state_new=false
    state_timer++;
}
else
{
    state=state_next;
    state_new=true;
    state_timer=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Rupees
var i=instance_create(mouse_x+irandom_range(-8,8),mouse_y+irandom_range(-8,8),obj_rupee_1);
if(instance_exists(i))
{
    i.peak=15;
    i.z=8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init In Game State
show_debug_message(room_get_name(room));

if(state==game_state_in_game &amp;&amp; !game_started)
{   //Init game world objects.
    game_started=true;
    if(instance_exists(obj_link))
        instance_kill(obj_link);
    var _mark = instance_find_tag("Game Start");
    if(_mark != noone)
    {
        var _link_x=_mark.center_x;
        var _link_y=_mark.center_y;
        instance_create(_link_x,_link_y,obj_link);
        
    }
    else
    {
        instance_create(0,0,obj_link);
        show_debug_message("Couldn't find start mark...");
    }
    link_update_palette();
    //Update hud without sounds...
    if(instance_exists(obj_hud))
        obj_hud.lb_current_health = obj_link.hit_points;
    
    //Other controller objects
    if(!instance_exists(obj_world_manager))
        instance_create(0,0,obj_world_manager);
    else
    {
        with(obj_world_manager)
            recent_sector_clear(true);
    }
    instance_deactivate_object(obj_spawner);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///In Game State - Room START
if(state==game_state_in_game)
{
    if(instance_exists(obj_spawner))
       instance_deactivate_object(obj_spawner);
    tile_layer_hide(safe_path_layer);
    tile_layer_hide(safe_aerial_layer);
    
}

 ///Benchmark
    /*
    var _count=0;
    for(var _x=0; _x&lt;room_width/(tile_size);_x++)
    {
        for(var _y=0; _y&lt;room_height/(tile_size);_y++)
        {
            //tile_add(bkg_safe_spawn,0,0,16,16,_x*tile_size,_y*tile_size,safe_path_layer);
            tile_add(bkg_grass,0,0,16,16,_x*tile_size,_y*tile_size,5000);
            //tile_add(bkg_grass,0,0,32,32,_x*tile_size*2,_y*tile_size*2,10000);
            //tile_add(bkg_grass,0,0,32,32,_x*tile_size*2,_y*tile_size*2,15000);
            if(_x mod 2 == 0 &amp;&amp; _y mod 2 == 0)
                instance_create(_x*tile_size,_y*tile_size,obj_wall);
            _count++;
            if(_count mod 1000 == 0)
                show_debug_message("Tiles placed: "+string(_count));
            
        }
    }
    show_debug_message("Total Tiles: "+string(_count*3));
    */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Room and View properties.
/*room_set_view_enabled(room,true);
//room_set_background_colour(room,c_black,false);
//window_set_size(screen_width*screen_scale,screen_height*screen_scale);
view_wview=screen_width;
view_hview=screen_height;
view_wport=screen_width*screen_scale;
view_hport=screen_height*screen_scale;

/*if(!screen_sized)
{
    screen_sized=true;
    surface_resize(application_surface,view_wport,view_hport);
}*/

/*window_set_caption(room_get_name(room));
view_enabled=true;
room_speed=60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free Sound System
FMODfree();
UnloadFMOD();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
