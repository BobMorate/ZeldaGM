<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_link_walk_north</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_actor_master</parentName>
  <maskName>spr_link_collision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Link specific properties
event_inherited();
event_inherited();
team=0;
shield_sprite=spr_link_shield;
shield_visible=true;
link_safe_x=x;
link_safe_y=y;

current_pal=1;
damage_pal=10;

keep_in_sector=false;

tag="Link";

hit_points=3;

boomerang_yoff=0;
boomerang_height=10;

my_textbox=noone;

//Swimming Properties
swim_accel=.03;
swim_friction=.01;
swim_max=1;

splash_frame=0;
splash_speed=.15;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Link States
state_add("Item Get",state_link_item_get,0,spr_link_item_get);
state_add("Triforce Get",state_link_triforce_get,0,spr_link_triforce_get);
state_add("Death",state_link_death,0,spr_link_death);
state_add("Talk",state_link_talk,0,spr_link_stand_east,spr_link_stand_south,spr_link_stand_north);
state_add("Captured",state_link_captured,0,spr_link_knockback_east,spr_link_knockback_south,spr_link_knockback_north);
state_add("Fall",state_link_fall,0,spr_link_knockback_east,spr_link_knockback_south,spr_link_knockback_north);
state_add("Jump",state_link_jump,0,spr_link_walk_east,spr_link_walk_south,spr_link_walk_north);
state_add("Boots Windup",state_link_boots_windup,0,spr_link_walk_east,spr_link_walk_south,spr_link_walk_north);
state_add("Boots Run",state_link_boots_run,3.5,spr_link_charge_east,spr_link_charge_south,spr_link_charge_north);
state_add("Boots Knockback",state_link_boots_knockback,2,spr_link_knockback_east,spr_link_knockback_south,spr_link_knockback_north);
state_add("Boots Jump",state_link_boots_jump,0,spr_link_walk_east,spr_link_walk_south,spr_link_walk_north);
state_add("Tread Water",state_link_tread_water,0,spr_link_tread_water_east,spr_link_tread_water_south,spr_link_tread_water_north);
state_add("Swim",state_link_swim,0,spr_link_swim_east,spr_link_swim_south,spr_link_swim_north);
state_add("Stroke",state_link_stroke,0,spr_link_stroke_east,spr_link_stroke_south,spr_link_stroke_north);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Item stuff
item=noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles
charge_part_x=0;
charge_part_y=0;
part_sword_charge=part_type_create();
part_type_sprite(part_sword_charge,spr_sword_charge,0,0,0);
part_type_size(part_sword_charge,0.00,0.00,0.08,0);
part_type_scale(part_sword_charge,1,1);
part_type_color2(part_sword_charge,16777088,16777215);
part_type_alpha2(part_sword_charge,0,1);
part_type_speed(part_sword_charge,0.10,0.10,0.20,0);
part_type_direction(part_sword_charge,0,0,0,0);
part_type_blend(part_sword_charge,0);
part_type_life(part_sword_charge,10,10);
part_type_orientation(part_sword_charge,0,0,0,0,true);




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create HUD
if(!instance_exists(obj_hud))
    instance_create(x,y,obj_hud);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw_shadow
if(draw_shadow &amp;&amp; visible &amp;&amp; !is_swimming &amp;&amp; !in_shallow_water &amp;&amp; !in_tall_grass)
    part_particles_create(Shadow_System,x,y,my_shadow_part,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for Warp Zones
if(position_meeting(x,y,obj_warp) &amp;&amp; !instance_exists(obj_room_transition_manager))
{
    var _inst=instance_place(x,y,obj_warp);
    var _trans=transition_create(.5*room_speed,.5*room_speed,.5*room_speed);
    transition_add_room_change(_trans,_inst.target_room);
    var _ignore_collision=true;
    if(_inst.warp_type == warp_type_stairs_down)
    {
        _ignore_collision=false;
        sfx_play("Stairs Down");
        obj_link.override_depth=true;
        obj_link.depth=-50001
    }
    else if(_inst.warp_type == warp_type_stairs_up)
    {
        _ignore_collision=false;
        sfx_play("Stairs Up");  
        obj_link.override_depth=true;
        obj_link.depth=-50001
    }
    else
    {
        obj_link.override_depth=false;
        obj_link.depth=-obj_link.y;
        transition_add_music_change(_trans,true);
    }  
    
    //Begin transition
    switch(_inst.out_effect)
    {
        case obj_transfx_spotlight_out: transition_add_spotlight_out(_trans,_inst); break;
        case obj_transfx_fade_out: transition_add_fade_out(_trans);break;
    }
    switch(_inst.in_effect)
    {
        case obj_transfx_spotlight_in: transition_add_spotlight_in(_trans,"Link"); break;
        case obj_transfx_fade_in: transition_add_fade_in(_trans);break;
    }
    transition_move_link(_trans,
                         _inst.move_out_state,
                         _inst.move_out_direction,
                         _inst.target_marker,
                         _inst.move_in_state,
                         _inst.move_in_direction,
                         _ignore_collision);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for Tile Layers
if(state==state_get_script("Stand") || state==state_get_script("Walk") ||
   state==state_get_script("Swim") || state==state_get_script("Tread Water") || state==state_get_script("Stroke") ||
   state==state_get_script("Sword Charge") || state==state_get_script("Boots Run")
   )
{
    if(!is_swimming &amp;&amp; tile_layer_find(water_layer,x,y) != -1)
    {   //Start Swimming
        if(save_data_get("Flippers"))
        {
            state_switch("Tread Water");
            is_swimming=true;
        }
        else
        {   
            state_switch("Jump");
        }
    }
    else if(is_swimming &amp;&amp; tile_layer_find(water_layer,x,y) == -1)
    {   //Stop Swimming
        state_switch("Walk");
        is_swimming=false;
    }
    else if(state_timer mod 30 == 0 &amp;&amp; !is_swimming &amp;&amp; tile_layer_find(water_layer,x,y) == -1)
    {   //On Land
        link_safe_x=x;
        link_safe_y=y;
    }
    
    //Shallow Water
    if(tile_layer_find(shallow_water_layer,x,y) != -1)
        in_shallow_water=true;
    else
        in_shallow_water=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get hit by Projectiles
if(other.team != team &amp;&amp; !actor_is_invincible())
{
    if(shield_active &amp;&amp; other.is_solid)
    {
        if(abs(angle_difference(shield_direction,other.direction-180))&gt;=45 || 
           other.block_level &gt; save_data_get("Shield"))
        {   //Not blocked
            with(other)
                hit=true;
            if(state_interruptable)
            {
                state_switch("Knock Back",true);
                state_direction = point_direction(x,y,other.x,other.y)+180;
                temp_invincibility_timer=45;
            }
            else
                temp_invincibility_timer=45;
            damage_link(other.damage)
        }
        else
        {   //Blocked
            sfx_play("Shield Block");
            other.blocked=true;
        }
    }
    else if(other.is_solid &amp;&amp; !actor_is_invincible())
    {   //Get fucked!
        with(other)
            hit=true;
        if(state_interruptable)
        {
            state_switch("Knock Back",true);
            state_direction = point_direction(x,y,other.x,other.y)+180;
        }
        else
            temp_invincibility_timer=45;
        damage_link(other.damage)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spike_trap_red">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get knocked back by traps
if(!actor_is_invincible())
{   
    if(state_interruptable)
    {
        state_switch("Knock Back");
        show_debug_message("Knocking link back");
        state_direction = point_direction(x,y,other.x,other.y)+180;
        state_interruptable=false;
        state_limit=10;
        temp_invincibility_timer=45;
        is_temp_invincible=true;
    }
    else
        temp_invincibility_timer=45;  
    damage_link(other.damage)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_master">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get knocked back by enemies
if(!actor_is_invincible() &amp;&amp; !other.is_dizzy &amp;&amp; other.is_dangerous &amp;&amp; position_meeting(x,y,obj_enemy_master))
{   
    if(state_interruptable)
    {
        state_switch("Knock Back");
        show_debug_message("Knocking link back");
        state_direction = point_direction(x,y,other.x,other.y)+180;
        state_interruptable=false;
        state_limit=10;
        temp_invincibility_timer=45;
        is_temp_invincible=true;
    }
    else
        temp_invincibility_timer=45;  
    damage_link(other.damage)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(vk_control))
{
    save_data_add("Heart Containers",-1);
    hit_points=clamp(hit_points,0,save_data_get("Heart Containers"));
}
else
{
    hit_points=clamp(hit_points-.5,0,save_data_get("Heart Containers"));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(vk_control))
{
    save_data_add("Heart Containers",1);
}
else
{
    hit_points=clamp(hit_points+.5,0,save_data_get("Heart Containers"));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset boomerang if I changed rooms while it was out.
if(my_boomerang != noone &amp;&amp; !instance_exists(my_boomerang))
    my_boomerang=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Shitty Hud
/*draw_set_font(fnt_small);
draw_set_text_alignment(7);
var _equipped_key=obj_game_manager.item_grid[# item_key,save_data_get("Item")];
draw_text_stroked(5,50,"Life - "+string(hit_points)+" - "+string(save_data_get("Heart Containers"))+
                      "#Rupees - "+string(save_data_get("Rupees"))+
                      "#Bombs - "+string(save_data_get("Bombs"))+" Max:"+string(save_get_max("Bombs"))+
                      "#Keys - "+string(save_data_get("Keys"))+
                      "#Equipped - "+string(_equipped_key),c_white,c_navy,1,8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
state_set_sprite();
//if(draw_shadow)
//    part_particles_create(Shadow_System,x,y,my_shadow_part,1);
if(in_shallow_water)
    z=-1;


var _draw_shield=false;
var _shield_index=0;
var _shield_scale=1;
if(shield_sprite != noone &amp;&amp; save_data_get("Shield")&gt;0)
{
    _draw_shield=true;
    switch(shield_direction)
    {
        case north: _shield_index = 2; break;
        case south: _shield_index = 0; break;
        case west: _shield_scale=-1;
        case east:  _shield_index = 1; break;
    }
    _shield_index+=3*(save_data_get("Shield")-1)
}

if(_draw_shield &amp;&amp; shield_visible==1) //Draw shield behind.
    draw_sprite_ext(shield_sprite,_shield_index,x+(shield_xoff*image_xscale),y+shield_yoff-z,_shield_scale*abs(image_xscale),image_yscale,image_angle,image_blend,image_alpha)

if(temp_invincibility_timer &gt;0 &amp;&amp; temp_invincibility_timer mod 4 == 0)
    pal_swap_set(my_shader,my_pal_sprite,damage_pal);
else
    pal_swap_set(my_shader,my_pal_sprite,current_pal);
draw_self_z();
//draw_sprite_ext(sprite_index,image_index,x,y-z,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
pal_swap_reset();
    
if(_draw_shield &amp;&amp; shield_visible==-1) //Draw shield ontop.
    draw_sprite_ext(shield_sprite,_shield_index,x+(shield_xoff*image_xscale),y+shield_yoff-z,_shield_scale*abs(image_xscale),image_yscale,image_angle,image_blend,image_alpha)

if(dizzy_timer&gt;0)
    draw_sprite(spr_fx_dizzy,dizzy_timer div 4,x,y-sprite_height-2);

if(in_shallow_water)
{
    draw_sprite(spr_fx_shallow_water,splash_frame,x,y);
    splash_frame+=splash_speed;
}

//Tall Grass
if(in_tall_grass)
    draw_sprite(spr_fx_tall_grass,grass_frame,x,y);
    
//Collision Mask
//draw_sprite_ext(mask_index,0,x,y,1,1,0,c_white,.5);

//Draw Origin
/*draw_set_color(c_black);
draw_line(x-5,y,x+5,y);
draw_line(x,y-5,x,y+5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
