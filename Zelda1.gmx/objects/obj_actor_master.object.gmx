<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_tagged</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General Properties
event_inherited();
is_frozen=false;
move_speed=1.25;
is_running=false;
is_swimming=false;
movement_direction=noone;
facing_direction=south;
x_speed=0;
y_speed=0;
tag="";

movement_code=standard_movement_and_collision;
ignore_collision=false;
ignore_room_boundries=false;
ignore_view_transitions=false;
keep_in_view=false;
keep_in_sector=true;
is_in_view=false;
view_margin = tile_size;
z=0;
depth=-y;

timer=0;

override_depth=false;
override_controls=false;

in_tall_grass=false;
grass_frame=0;
grass_speed=.2;

is_flying=false;
is_destroyed=false;
against_wall=0; //Counts number of steps they have been pusing against a wall without moving.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI Stuff
ai_script=noone;
ai_state=ai_spawn;
ai_state_next=ai_state;
ai_state_new=true;
ai_timer=0;
ai_decision=noone;//use this when you need to remember something.
ai_destination_x=0;
ai_destination_y=0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shield Properties
shield_sprite=noone;
shield_direction=facing_direction;
shield_xoff=0;
shield_yoff=0;
shield_visible=false; //0 no shield: -1 ontop of link, 1 behind link.
shield_active=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
actor_zero_controls(id);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat Specific Properties
attacker = noone;
target   = noone;
recent_damage=false;
team=0;

my_weapon=noone;
my_boomerang=noone; //Need to keep track of this since you can only have one at a time.
boomerang_yoff=0;
boomerang_height=10;

is_dizzy=false;
dizzy_timer=0;

is_invincible=false;
is_temp_invincible=false;
temp_invincibility_timer = 0;
temp_freeze_timer = 0;


hit_points=3;
hit_points_max=3;

damage_on_touch=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow Stuff
my_shadow=spr_shadow_medium;
draw_shadow=true;

my_shadow_part=part_type_create();
part_type_life(my_shadow_part,2,2);
part_type_sprite(my_shadow_part,my_shadow,false,false,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Definitions
state=noone;
state_grid=ds_grid_create(7,0)
state_add("Stand",state_link_stand,0,spr_link_stand_east,spr_link_stand_south,spr_link_stand_north);
state_add("Walk",state_link_walk,1.25,spr_link_walk_east,spr_link_walk_south,spr_link_walk_north);
state_add("Attack",state_link_attack,0,spr_link_attack_east,spr_link_attack_south,spr_link_attack_north);
state_add("Knock Back",state_link_knockback,3,spr_link_knockback_east,spr_link_knockback_south,spr_link_knockback_north);
state_add("Sword Charge",state_link_sword_charge,1.25,spr_link_charge_east,spr_link_charge_south,spr_link_charge_north);
state_add("Charge Attack",state_link_charge_attack,0,spr_link_spin_attack_east,spr_link_spin_attack_south,spr_link_spin_attack_north,spr_link_spin_attack_west);
state_add("Push",state_link_push,1.25,spr_link_push_east,spr_link_push_south,spr_link_push_north);
//Items
state_add("Boomerang",state_link_boomerang,0,spr_link_boomerang_east,spr_link_boomerang_south,spr_link_boomerang_north);
state_add("Bow",state_link_bow,0,spr_link_bow_east,spr_link_bow_south,spr_link_bow_north);

//Init State
state_switch("Stand");

//State Tracking Variables
state_new=true; //Lets you know if this is the first frame of a state.  
state_next=noone;  //Used to queue up a state.
state_timer=0;  //Lets you know how long you've been in a state.
state_limit=0;  //Used to set a length timer on some states.
state_interruptable=true;
state_direction=-1;
state_sprite_override=false;
state_speed_override=false;
state_timeline_speed=-1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Palette swap stuff.
current_pal=0;
my_shader=shd_color_swapper_16;
my_pal_sprite=spr_link_palette;
damage_pal=2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lights
light_sprite=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup State grid and shadow
is_destroyed=true;
ds_grid_destroy(state_grid);
part_type_destroy(my_shadow_part);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw_shadow
if(draw_shadow &amp;&amp; visible &amp;&amp; !is_swimming &amp;&amp; !in_tall_grass)
    part_particles_create(Shadow_System,x,y,my_shadow_part,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Frozen, Dizzy, Status Effects...
//Temp Invincibility Check and Timer
if(temp_invincibility_timer&gt;0)
{
    is_temp_invincible=true;
    temp_invincibility_timer-=1;
}
else
    is_temp_invincible=false;
        
if(is_frozen)
    timeline_running=false;
else
    timeline_running=true;
    
if(temp_freeze_timer&gt;0)
{
    temp_freeze_timer--;
    timeline_running=false;
}
else
    timeline_running=true;
    
if(dizzy_timer&gt;0)
{
    if(state_interruptable &amp;&amp; state!=state_get_script("Stand"))
    {
        //show_debug_message("State: "+string(script_get_name(state))+"  Interruptable: "+string(state_interruptable));
        state_switch("Stand");   
    }
    dizzy_timer--;
    is_dizzy=true;
}
else
    is_dizzy=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read Controls -- Run AI
if(!is_dizzy)
{
    if(!override_controls &amp;&amp; ai_script==noone)
    {   //No AI, not overriding controls.
        button_left=keyboard_check(vk_left);
        button_left_pressed=keyboard_check_pressed(vk_left);
        button_right=keyboard_check(vk_right);
        button_right_pressed=keyboard_check_pressed(vk_right);
        button_down=keyboard_check(vk_down);
        button_down_pressed=keyboard_check_pressed(vk_down);
        button_up=keyboard_check(vk_up);
        button_up_pressed=keyboard_check_pressed(vk_up);
        
        //Triggers/Bumpers
        button_equip_next_pressed=keyboard_check_pressed(ord("W"));
        button_equip_previous_pressed=keyboard_check_pressed(ord("Q"));
        
        //Face Buttons
        button_context_pressed=keyboard_check_pressed(ord("X"));
        button_context=keyboard_check(ord("X"));
        button_attack=keyboard_check(ord("Z"));
        button_attack_pressed=keyboard_check_pressed(ord("Z"));
        button_item=keyboard_check(ord("A"));
        button_item_pressed=keyboard_check_pressed(ord("A"));
        
    }
    
    if(ai_script !=noone &amp;&amp; override_controls &amp;&amp; !is_frozen)
    {   //Run the AI.
    
        //Zero out input
        actor_zero_controls(id);
        script_execute(ai_script);
        
        if(ai_state==ai_state_next)
        {
            ai_state_new=false;
            ai_timer++;
        }
        else
        {
            ai_state=ai_state_next;
            ai_state_new=true;
            ai_timer=0;
        }
    }
}
else
    actor_zero_controls(id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run State Code
if(!is_frozen &amp;&amp; !is_destroyed)
{   
    //State timer
    if(state_timer != 0)
        state_new = false;
    else
        state_new = true;
        
    state_timer+=1;
    
    //MAIN CODE
    if(state !=noone)
        script_execute(state);
    else
        state_switch("Stand",true);
        
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for in view or not.
is_in_view=point_in_rectangle(x,y,
                              view_xview-view_margin,
                              view_yview-view_margin,
                              view_xview+view_wview+view_margin,
                              view_yview+view_hview+view_margin);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Movement code
script_execute(movement_code);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Collision (Experimental)
/*if(!is_frozen &amp;&amp; !is_destroyed)
{
    movement_direction = point_direction(0,0,x_speed,y_speed);
    if(!state_speed_override)
    {
        move_speed_x=abs(state_get_speed(state)*x_speed);//abs(lengthdir_x(state_get_speed(state),movement_direction));
        move_speed_y=abs(state_get_speed(state)*y_speed);//abs(lengthdir_y(state_get_speed(state),movement_direction));
        
        //show_debug_message("move_speed: "+write_coordinates(move_speed_x,move_speed_y));
        //Would love to make this actually work the way I want it to work...
        if(position_meeting(x,y,obj_slow_up_down))
            move_speed_y*=.35;
        else if(position_meeting(x,y,obj_slow_left_right))
            move_speed_x*=.35;
        else if(position_meeting(x,y,obj_speed_doubler))
        {
            move_speed_x*=2;
            move_speed_y*=2;
        }
    }
    else
    {
        show_debug_message('Ignoring state speed. Speed='+write_coordinates(x_speed,y_speed))
        move_speed_x=abs(x_speed);
        move_speed_y=abs(y_speed);
    }
    
        
    if(move_speed_x != 0 || move_speed_y != 0)
    {   //We are movin'
        
        var _this_wall=instance_place(x+lengthdir_x(move_speed_x,movement_direction),y+lengthdir_y(move_speed_y,movement_direction),obj_wall);
        var _solid=false;
        if(_this_wall != noone &amp;&amp; _this_wall.enabled)
            _solid=true;
        if(!_solid || ignore_collision) //!place_meeting(x+lengthdir_x(move_speed,movement_direction),y+lengthdir_y(move_speed,movement_direction),obj_wall) || ignore_collision
        {   //No walls.  Free to move.
            x+=lengthdir_x(move_speed_x,movement_direction);
            y+=lengthdir_y(move_speed_y,movement_direction);
            against_wall=0;
        }
        else
        {   //Colliding
            if(x_speed&gt;0)
                x=floor(x);
            else if(x_speed&lt;0)
                x=ceil(x);
            if(y_speed&gt;0)
                y=floor(y);
            else if(y_speed&lt;0)
                y=ceil(y);

            //Snap to wall
            while(!place_meeting(x,y,obj_wall))
            {
                x+=lengthdir_x(.1,movement_direction);
                if(place_meeting(x,y,obj_wall))
                {
                    x-=lengthdir_x(.1,movement_direction);
                    break;
                }
                y+=lengthdir_y(.1,movement_direction);
                if(place_meeting(x,y,obj_wall))
                {
                    y-=lengthdir_y(.1,movement_direction);
                    break;
                }
            }
            
            
            var _check_angle=45;
            //var _check_dist=max(move_speed_x,move_speed_y);
            var _corner_check=6;
            if(state != state_get_script("Knock Back"))
            {
                if(!place_meeting(x+lengthdir_x(move_speed_x,movement_direction+_check_angle),y+lengthdir_y(move_speed_y,movement_direction+_check_angle),obj_wall))
                {   //Ramps Left
                    x+=lengthdir_x(move_speed_x,movement_direction+_check_angle);
                    y+=lengthdir_y(move_speed_y,movement_direction+_check_angle);
                    against_wall=0;
                }
                else if(!place_meeting(x+lengthdir_x(move_speed_x,movement_direction-_check_angle),y+lengthdir_y(move_speed_y,movement_direction-_check_angle),obj_wall))
                {   //Ramps Right
                    //if(movement_direction=north) //WHY???!?!?!
                    //    x++;
                    //show_debug_message("Ramping Right");
                    x+=lengthdir_x(move_speed_x,movement_direction-_check_angle);
                    y+=lengthdir_y(move_speed_y,movement_direction-_check_angle);
                    against_wall=0;
                }
                else
                {   //You're stuck.
                    against_wall++;
                }
            }
        }
    }
    else
    {
        movement_direction=noone;
        against_wall=0;
        x=round(x);
        y=round(y);
    }

    //Break out of collision
    if(place_meeting(x,y,obj_wall) &amp;&amp; !ignore_collision)
    {   ///Break out of walls
        show_debug_message("Caught in a wall, breaking out");
        var xx=x;
        var yy=y;
        var safe=false;
        for(var i=.1; i&lt;5; i+=.1)
        {
            for(var ii=0; ii&lt;8;ii++)    
            {
                if(!place_meeting(xx+round(lengthdir_x(i,ii*45)),yy+round(lengthdir_y(i,ii*45)),obj_wall))
                {
                    xx+=round(lengthdir_x(i,ii*45));
                    yy+=round(lengthdir_y(i,ii*45));
                    safe=true;
                    break;
                }
            }
            if(safe)
            {
                x=xx;
                y=yy;
                break;
            }
        }
    }
    //Stay in room.
    if(!ignore_room_boundries)
    {
        x=clamp(x,0,room_width-1);
        y=clamp(y,0,room_height-1);
    }
    
    //Stay in sector
    if(instance_exists(obj_world_manager) &amp;&amp; keep_in_sector)
    {   
        var _buffer=tile_size*.5;
        x=clamp(x,obj_world_manager.bound_left+_buffer,obj_world_manager.bound_right+screen_width-_buffer);
        y=clamp(y,obj_world_manager.bound_top+_buffer,obj_world_manager.bound_bot+screen_height-_buffer);
    }
    
    //Depth
    if(!override_depth)
        depth=-y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for tall grass
var _grass=false;
for(var i=0;i&lt;3;i++)
{
    if(instance_position(x+lengthdir_x(1,90*i),y+lengthdir_y(1,90*i),obj_tall_grass) != noone)
    {
        _grass=true;   
        break;
    }
}
if(_grass)
    in_tall_grass=true; 
else
    in_tall_grass=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_weapon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect attacks
if(other.team != team 
   &amp;&amp; !actor_is_invincible()
   &amp;&amp; ds_list_find_index(other.hit_list,id) == -1)
{   //You gettin' hit, foo'!

    ds_list_add(other.hit_list,id);
    attacker=other.id;
    if(instance_exists(other.owner))
        other.owner.temp_freeze_timer=4;
        
    hit_points-=other.damage;
    //temp_freeze_timer=10;
    var _spark=instance_create(x,y,obj_fx_spark);
    
    sfx_play("Enemy Hit");
    if(state_interruptable)
    {
        state_switch("Knock Back",true);
    }
    else
    {   
        temp_invincibility_timer=30;
        if(hit_points&lt;=0)
            instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
state_set_sprite();

if(temp_invincibility_timer &gt;0 &amp;&amp; (temp_invincibility_timer mod 4 == 0 || temp_invincibility_timer mod 4 == 1))
    pal_swap_set(my_shader,my_pal_sprite,damage_pal);
else
    pal_swap_set(my_shader,my_pal_sprite,current_pal);

draw_sprite_ext(sprite_index,image_index,x,y-z,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
pal_swap_reset();
    
if(dizzy_timer&gt;0)
    draw_sprite(spr_fx_dizzy,dizzy_timer div 4,x,y-sprite_height-2);

//Tall Grass
if(in_tall_grass)
    draw_sprite(spr_fx_tall_grass,grass_frame,x,y);

//Collision Mask
//draw_sprite_ext(mask_index,0,x,y,1,1,0,c_white,.5);

//Draw Origin
/*draw_set_color(c_black);
draw_line(x-5,y,x+5,y);
draw_line(x,y-5,x,y+5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
