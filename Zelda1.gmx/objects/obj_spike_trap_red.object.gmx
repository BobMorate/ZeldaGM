<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_razor_trap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30000</depth>
  <persistent>0</persistent>
  <parentName>obj_sector_activated</parentName>
  <maskName>spr_collision_12x12_circle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Razor Trap Properties
event_inherited();
my_start_x=x;
my_start_y=y;
damage=1;
image_speed=0;

sprite_angle=0;
//Link tracking
max_dist=10;
collapse_direction=east;
collapse_speed=2.5;
reset_speed=1;

rotate_speed=10;
reset_rotate_speed=rotate_speed*(reset_speed/collapse_speed);

enum STATES{WAIT,COLLAPSE,RESET};
state=STATES.WAIT;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Watch for link
if(instance_exists(obj_link) &amp;&amp; is_in_sector(x,y))
{
    depth=-y;
    if(state==STATES.WAIT)
    {
        if(abs(round(obj_link.x)-x)&lt;=max_dist)
        {   //Collapse vertically
            state=STATES.COLLAPSE;
            if(obj_link.y&gt;=y)
                collapse_direction=south;
            else
                collapse_direction=north;
        }
        else if(abs(round(obj_link.y)-y)&lt;=max_dist)
        {   //Collapse horizontally
            state=STATES.COLLAPSE;
            if(obj_link.x&gt;=x)
                collapse_direction=east;
            else
                collapse_direction=west;
        }
    }
    else if(state==STATES.COLLAPSE)
    {
        sprite_angle+=rotate_speed;
        x=x+lengthdir_x(collapse_speed,collapse_direction);
        y=y+lengthdir_y(collapse_speed,collapse_direction);
        
        if(place_meeting(x,y,obj_wall) || place_meeting(x,y,obj_spike_trap_red) || place_meeting(x,y,obj_spike_blocker))
        {   //Done moving.  Reset.
            var i=instance_create(x+lengthdir_x(collapse_speed,collapse_direction),y+lengthdir_y(collapse_speed,collapse_direction),obj_fx_spark);
            i.depth=depth-50;
            sfx_play("Chink",false);
            state=STATES.RESET;
            collapse_direction+=180;
        }
    }
    else if(state==STATES.RESET)
    {
        sprite_angle-=reset_rotate_speed;
        if(point_distance(x,y,my_start_x,my_start_y)&gt;reset_speed)
        {
            x=x+lengthdir_x(reset_speed,collapse_direction);
            y=y+lengthdir_y(reset_speed,collapse_direction);
        }
        else
        {
            sprite_angle=0;
            x=my_start_x;
            y=my_start_y;
            state=STATES.WAIT;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
